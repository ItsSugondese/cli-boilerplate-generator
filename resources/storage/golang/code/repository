package repo

import (
	generic_repo "?pname/generics/generic-repo"
    "?pname/internal/?same/dto"
    dto_utils "?pname/pkg/utils/dto-utils"
    pagination_utils "?pname/pkg/utils/pagination-utils"
	"gorm.io/gorm"
)

type ?uRepo interface {
	FindAll?uPaginatedRepo(pagination dto.?uPaginationRequest, response pagination_utils.PaginationResponse) *pagination_utils.PaginationResponse
	Find?uDetailsByIdRepo(id uuid.UUID) (response *dto.?uResponse, err error)
}

type ?lRepo struct {
	db *gorm.DB
}

func New?uRepo(db *gorm.DB) ?uRepo {
	return &?lRepo{db: db}
}

func (r *?lRepo) FindAll?uPaginatedRepo(pagination dto.?uPaginationRequest, response pagination_utils.PaginationResponse) *pagination_utils.PaginationResponse {

	query := `
    `

	// Store the results in a map
	var resultMap []map[string]interface{}
	r.db.Scopes(generic_repo.RawQueryPaginate(&pagination.PaginationRequest, &response, r.db, query, )).Find(&resultMap)
	tempDtos := dto_utils.ConvertSlice[map[string]interface{}, dto.?uResponse](resultMap)

	response.Data = tempDtos
	return &response
}

func (r *?lRepo) Find?uDetailsByIdRepo(id uuid.UUID) (response *dto.?uResponse, err error) {
	query := `
    `

	var resultMap map[string]interface{}
	err = r.db.Raw(query, id).Scan(&resultMap).Error

	if err != nil {
		return nil, err
	}
	err = dto_utils.DtoConvertErrorHandledReturnError(resultMap, &response)

	if err != nil {
		return nil, err
	}

	return response, nil
}

