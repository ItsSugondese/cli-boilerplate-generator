package service

import (
	generic_repo "?pname/generics/generic-repo"
	?snake_navigator "?pname/internal/?same/?same-navigator"
	"?pname/internal/?same/dto"
	"?pname/internal/?same/model"
	"?pname/internal/?same/repo"
	"?pname/pkg/common/database"
	pagination_utils "?pname/pkg/utils/pagination-utils"
	"encoding/json"
	dto_utils "?pname/pkg/utils/dto-utils"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type ?uService interface {
	Save?uService(ctx *gin.Context, ?ldto dto.?uRequest) (dto.?uResponse)
    GetAll?u(ctx *gin.Context, ) []model.?u
    FindAll?usPaginatedService(ctx *gin.Context, request dto.?uPaginationRequest) *pagination_utils.PaginationResponse
    Get?uDetailsByIdService(ctx *gin.Context, id uuid.UUID) *dto.?uResponse
    Delete?uByIdService(ctx *gin.Context, ?lId uuid.UUID)
}

type ?lService struct {
	repo repo.?uRepo
}

func New?uService(repo repo.?uRepo) ?uService {
	return &?lService{
		repo: repo,
	}
}

func (s *?lService) Save?uService(ctx *gin.Context, ?ldto dto.?uRequest) dto.?uResponse {
	tx := database.DB.Begin()
	tx = tx.WithContext(ctx)


	var ?lDetails model.?u

	if ?ldto.ID != uuid.Nil {
		?lDetails = ?snake_navigator.Find?uByIdService(?ldto.ID)
	}

	dto_utils.DtoConvertErrorHandled(?ldto, &?lDetails)

	var saved?u model.?u
	var save?uError error

	if ?ldto.ID == uuid.Nil {
		saved?u, save?uError = generic_repo.SaveRepo(tx, ?lDetails)
	} else {
		saved?u, save?uError = generic_repo.UpdateRepo(tx, ?lDetails)
	}

	if save?uError != nil {
		tx.Rollback()
		panic(save?uError)
	}

	if err := tx.Commit().Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	var response dto.?uResponse
    dto_utils.DtoConvertErrorHandled(saved?u, &response)

    return response // Successfully return the saved ?swag
}

func (s *?lService) GetAll?u(ctx *gin.Context, ) []model.?u {
	response, err := generic_repo.FindAll[model.?u]()

	if err != nil {
		panic(err)
	}
	return response
}

func (s *?lService) FindAll?usPaginatedService(ctx *gin.Context, request dto.?uPaginationRequest) *pagination_utils.PaginationResponse {
	return s.repo.FindAll?uPaginatedRepo(request, pagination_utils.PaginationResponse{})
}

func (s *?lService) Get?uDetailsByIdService(ctx *gin.Context, id uuid.UUID) *dto.?uResponse {
	var ?lResponse dto.?uResponse
    details := ?snake_navigator.Find?uByIdService(id)

	jsonData, _ := json.Marshal(details)
	jsonUnmarshalError := json.Unmarshal(jsonData, &?lResponse)
	if jsonUnmarshalError != nil {
		panic(jsonUnmarshalError)
	}

	return &?lResponse
}

func (s *?lService) Delete?uByIdService(ctx *gin.Context, ?lId uuid.UUID) {
	tx := database.DB.Begin()
	tx = tx.WithContext(ctx)

	?lDetails := ?snake_navigator.Find?uByIdService(?lId)


	// Delete the user location
	err := generic_repo.DeleteByStructRepo(tx, ?lDetails)
	if err != nil {
		panic(err)
	}

	// Commit the transaction
	if err := tx.Commit().Error; err != nil {
		panic(err)
	}
}
--noUUID--
func (s *?lService) Get?uDetailsByIdService(ctx *gin.Context, id string) *dto.?uResponse {
	var ?lResponse dto.?uResponse
	details := ?snake_navigator.Find?uByIdService(id)

	jsonData, _ := json.Marshal(details)
	jsonUnmarshalError := json.Unmarshal(jsonData, &?lResponse)
	if jsonUnmarshalError != nil {
		panic(jsonUnmarshalError)
	}

	return &?lResponse
}

func (s *?lService) Delete?uByIdService(ctx *gin.Context, ?lId string) {
	tx := database.DB.Begin()
	tx = tx.WithContext(ctx)

	?lDetails := ?snake_navigator.Find?uByIdService(?lId)

	// Delete the user location
	err := generic_repo.DeleteByStructRepo(tx, ?lDetails)
	if err != nil {
		panic(err)
	}

	// Commit the transaction
	if err := tx.Commit().Error; err != nil {
		panic(err)
	}
}
